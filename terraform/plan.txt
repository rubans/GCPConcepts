Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

module.gke_cluster.data.google_container_engine_versions.location: Refreshing state...

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # google_container_node_pool.node_pool will be created
  + resource "google_container_node_pool" "node_pool" {
      + cluster             = "example-private-cluster"
      + id                  = (known after apply)
      + initial_node_count  = 1
      + instance_group_urls = (known after apply)
      + location            = "europe-west2"
      + max_pods_per_node   = (known after apply)
      + name                = "private-pool"
      + name_prefix         = (known after apply)
      + node_count          = (known after apply)
      + project             = "fast-planet-243821"
      + region              = (known after apply)
      + version             = (known after apply)
      + zone                = (known after apply)

      + autoscaling {
          + max_node_count = 5
          + min_node_count = 1
        }

      + management {
          + auto_repair  = true
          + auto_upgrade = true
        }

      + node_config {
          + disk_size_gb      = 30
          + disk_type         = "pd-standard"
          + guest_accelerator = (known after apply)
          + image_type        = "COS"
          + labels            = {
              + "private-pools-example" = "true"
            }
          + local_ssd_count   = (known after apply)
          + machine_type      = "n1-standard-1"
          + metadata          = (known after apply)
          + oauth_scopes      = [
              + "https://www.googleapis.com/auth/cloud-platform",
            ]
          + preemptible       = false
          + service_account   = (known after apply)
          + tags              = [
              + "private",
              + "private-pool-example",
            ]
        }

      + timeouts {
          + create = "30m"
          + delete = "30m"
          + update = "30m"
        }
    }

  # google_storage_bucket_iam_member.member will be created
  + resource "google_storage_bucket_iam_member" "member" {
      + bucket = "artifacts.fast-planet-243821.appspot.com"
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = (known after apply)
      + role   = "roles/storage.objectViewer"
    }

  # random_string.suffix will be created
  + resource "random_string" "suffix" {
      + id          = (known after apply)
      + length      = 4
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

  # module.gke_cluster.google_container_cluster.cluster will be created
  + resource "google_container_cluster" "cluster" {
      + additional_zones            = (known after apply)
      + cluster_ipv4_cidr           = (known after apply)
      + default_max_pods_per_node   = (known after apply)
      + enable_binary_authorization = false
      + enable_intranode_visibility = false
      + enable_kubernetes_alpha     = false
      + enable_legacy_abac          = false
      + enable_tpu                  = false
      + endpoint                    = (known after apply)
      + id                          = (known after apply)
      + initial_node_count          = 1
      + instance_group_urls         = (known after apply)
      + ip_allocation_policy        = [
          + {
              + cluster_ipv4_cidr_block       = (known after apply)
              + cluster_secondary_range_name  = "public-services"
              + create_subnetwork             = null
              + node_ipv4_cidr_block          = (known after apply)
              + services_ipv4_cidr_block      = (known after apply)
              + services_secondary_range_name = "public-services"
              + subnetwork_name               = null
              + use_ip_aliases                = true
            },
        ]
      + location                    = "europe-west2"
      + logging_service             = "logging.googleapis.com/kubernetes"
      + master_version              = (known after apply)
      + min_master_version          = "1.16.9-gke.6"
      + monitoring_service          = "monitoring.googleapis.com/kubernetes"
      + name                        = "example-private-cluster"
      + network                     = (known after apply)
      + node_locations              = (known after apply)
      + node_version                = (known after apply)
      + project                     = "fast-planet-243821"
      + region                      = (known after apply)
      + remove_default_node_pool    = true
      + services_ipv4_cidr          = (known after apply)
      + subnetwork                  = (known after apply)
      + tpu_ipv4_cidr_block         = (known after apply)
      + zone                        = (known after apply)

      + addons_config {
          + cloudrun_config {
              + disabled = (known after apply)
            }

          + horizontal_pod_autoscaling {
              + disabled = false
            }

          + http_load_balancing {
              + disabled = false
            }

          + istio_config {
              + auth     = (known after apply)
              + disabled = (known after apply)
            }

          + kubernetes_dashboard {
              + disabled = true
            }

          + network_policy_config {
              + disabled = false
            }
        }

      + authenticator_groups_config {
          + security_group = (known after apply)
        }

      + cluster_autoscaling {
          + enabled = (known after apply)

          + resource_limits {
              + maximum       = (known after apply)
              + minimum       = (known after apply)
              + resource_type = (known after apply)
            }
        }

      + database_encryption {
          + key_name = (known after apply)
          + state    = (known after apply)
        }

      + maintenance_policy {
          + daily_maintenance_window {
              + duration   = (known after apply)
              + start_time = "05:00"
            }
        }

      + master_auth {
          + client_certificate     = (known after apply)
          + client_key             = (sensitive value)
          + cluster_ca_certificate = (known after apply)

          + client_certificate_config {
              + issue_client_certificate = false
            }
        }

      + master_authorized_networks_config {
          + cidr_blocks {
              + cidr_block   = "0.0.0.0/0"
              + display_name = "all-for-testing"
            }
        }

      + network_policy {
          + enabled  = true
          + provider = "CALICO"
        }

      + node_config {
          + disk_size_gb      = (known after apply)
          + disk_type         = (known after apply)
          + guest_accelerator = (known after apply)
          + image_type        = (known after apply)
          + labels            = (known after apply)
          + local_ssd_count   = (known after apply)
          + machine_type      = (known after apply)
          + metadata          = (known after apply)
          + min_cpu_platform  = (known after apply)
          + oauth_scopes      = (known after apply)
          + preemptible       = (known after apply)
          + service_account   = (known after apply)
          + tags              = (known after apply)

          + taint {
              + effect = (known after apply)
              + key    = (known after apply)
              + value  = (known after apply)
            }

          + workload_metadata_config {
              + node_metadata = (known after apply)
            }
        }

      + node_pool {
          + initial_node_count  = (known after apply)
          + instance_group_urls = (known after apply)
          + max_pods_per_node   = (known after apply)
          + name                = (known after apply)
          + name_prefix         = (known after apply)
          + node_count          = (known after apply)
          + version             = (known after apply)

          + autoscaling {
              + max_node_count = (known after apply)
              + min_node_count = (known after apply)
            }

          + management {
              + auto_repair  = (known after apply)
              + auto_upgrade = (known after apply)
            }

          + node_config {
              + disk_size_gb      = (known after apply)
              + disk_type         = (known after apply)
              + guest_accelerator = (known after apply)
              + image_type        = (known after apply)
              + labels            = (known after apply)
              + local_ssd_count   = (known after apply)
              + machine_type      = (known after apply)
              + metadata          = (known after apply)
              + min_cpu_platform  = (known after apply)
              + oauth_scopes      = (known after apply)
              + preemptible       = (known after apply)
              + service_account   = (known after apply)
              + tags              = (known after apply)

              + taint {
                  + effect = (known after apply)
                  + key    = (known after apply)
                  + value  = (known after apply)
                }

              + workload_metadata_config {
                  + node_metadata = (known after apply)
                }
            }
        }

      + private_cluster_config {
          + enable_private_nodes   = true
          + master_ipv4_cidr_block = "10.5.0.0/28"
          + private_endpoint       = (known after apply)
          + public_endpoint        = (known after apply)
        }
    }

  # module.gke_service_account.google_project_iam_member.service_account-roles["roles/logging.logWriter"] will be created
  + resource "google_project_iam_member" "service_account-roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "fast-planet-243821"
      + role    = "roles/logging.logWriter"
    }

  # module.gke_service_account.google_project_iam_member.service_account-roles["roles/monitoring.metricWriter"] will be created
  + resource "google_project_iam_member" "service_account-roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "fast-planet-243821"
      + role    = "roles/monitoring.metricWriter"
    }

  # module.gke_service_account.google_project_iam_member.service_account-roles["roles/monitoring.viewer"] will be created
  + resource "google_project_iam_member" "service_account-roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "fast-planet-243821"
      + role    = "roles/monitoring.viewer"
    }

  # module.gke_service_account.google_project_iam_member.service_account-roles["roles/stackdriver.resourceMetadata.writer"] will be created
  + resource "google_project_iam_member" "service_account-roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "fast-planet-243821"
      + role    = "roles/stackdriver.resourceMetadata.writer"
    }

  # module.gke_service_account.google_service_account.service_account will be created
  + resource "google_service_account" "service_account" {
      + account_id   = "example-private-cluster-sa"
      + display_name = "Example GKE Cluster Service Account managed by Terraform"
      + email        = (known after apply)
      + id           = (known after apply)
      + name         = (known after apply)
      + project      = "fast-planet-243821"
      + unique_id    = (known after apply)
    }

  # module.vpc_network.google_compute_network.vpc will be created
  + resource "google_compute_network" "vpc" {
      + auto_create_subnetworks         = false
      + delete_default_routes_on_create = false
      + gateway_ipv4                    = (known after apply)
      + id                              = (known after apply)
      + name                            = (known after apply)
      + project                         = "fast-planet-243821"
      + routing_mode                    = "REGIONAL"
      + self_link                       = (known after apply)
    }

  # module.vpc_network.google_compute_router.vpc_router will be created
  + resource "google_compute_router" "vpc_router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = (known after apply)
      + network            = (known after apply)
      + project            = "fast-planet-243821"
      + region             = "europe-west2"
      + self_link          = (known after apply)
    }

  # module.vpc_network.google_compute_router_nat.vpc_nat will be created
  + resource "google_compute_router_nat" "vpc_nat" {
      + id                                 = (known after apply)
      + name                               = (known after apply)
      + nat_ip_allocate_option             = "AUTO_ONLY"
      + project                            = "fast-planet-243821"
      + region                             = "europe-west2"
      + router                             = (known after apply)
      + source_subnetwork_ip_ranges_to_nat = "LIST_OF_SUBNETWORKS"

      + subnetwork {
          + name                     = (known after apply)
          + secondary_ip_range_names = []
          + source_ip_ranges_to_nat  = [
              + "ALL_IP_RANGES",
            ]
        }
    }

  # module.vpc_network.google_compute_subnetwork.vpc_subnetwork_private will be created
  + resource "google_compute_subnetwork" "vpc_subnetwork_private" {
      + creation_timestamp       = (known after apply)
      + enable_flow_logs         = true
      + fingerprint              = (known after apply)
      + gateway_address          = (known after apply)
      + id                       = (known after apply)
      + ip_cidr_range            = "10.3.16.0/20"
      + name                     = (known after apply)
      + network                  = (known after apply)
      + private_ip_google_access = true
      + project                  = "fast-planet-243821"
      + region                   = "europe-west2"
      + secondary_ip_range       = [
          + {
              + ip_cidr_range = "10.4.16.0/20"
              + range_name    = "private-services"
            },
        ]
      + self_link                = (known after apply)
    }

  # module.vpc_network.google_compute_subnetwork.vpc_subnetwork_public will be created
  + resource "google_compute_subnetwork" "vpc_subnetwork_public" {
      + creation_timestamp       = (known after apply)
      + enable_flow_logs         = true
      + fingerprint              = (known after apply)
      + gateway_address          = (known after apply)
      + id                       = (known after apply)
      + ip_cidr_range            = "10.3.0.0/20"
      + name                     = (known after apply)
      + network                  = (known after apply)
      + private_ip_google_access = true
      + project                  = "fast-planet-243821"
      + region                   = "europe-west2"
      + secondary_ip_range       = [
          + {
              + ip_cidr_range = "10.4.0.0/20"
              + range_name    = "public-services"
            },
        ]
      + self_link                = (known after apply)
    }

  # module.vpc_network.module.network_firewall.data.google_compute_subnetwork.private_subnetwork will be read during apply
  # (config refers to values not yet known)
 <= data "google_compute_subnetwork" "private_subnetwork"  {
      + description              = (known after apply)
      + gateway_address          = (known after apply)
      + id                       = (known after apply)
      + ip_cidr_range            = (known after apply)
      + network                  = (known after apply)
      + private_ip_google_access = (known after apply)
      + project                  = (known after apply)
      + region                   = (known after apply)
      + secondary_ip_range       = (known after apply)
      + self_link                = (known after apply)
    }

  # module.vpc_network.module.network_firewall.data.google_compute_subnetwork.public_subnetwork will be read during apply
  # (config refers to values not yet known)
 <= data "google_compute_subnetwork" "public_subnetwork"  {
      + description              = (known after apply)
      + gateway_address          = (known after apply)
      + id                       = (known after apply)
      + ip_cidr_range            = (known after apply)
      + network                  = (known after apply)
      + private_ip_google_access = (known after apply)
      + project                  = (known after apply)
      + region                   = (known after apply)
      + secondary_ip_range       = (known after apply)
      + self_link                = (known after apply)
    }

  # module.vpc_network.module.network_firewall.google_compute_firewall.private_allow_all_network_inbound will be created
  + resource "google_compute_firewall" "private_allow_all_network_inbound" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + id                 = (known after apply)
      + name               = (known after apply)
      + network            = (known after apply)
      + priority           = 1000
      + project            = "fast-planet-243821"
      + self_link          = (known after apply)
      + source_ranges      = (known after apply)
      + target_tags        = [
          + "private",
        ]

      + allow {
          + ports    = []
          + protocol = "all"
        }
    }

  # module.vpc_network.module.network_firewall.google_compute_firewall.private_allow_restricted_network_inbound will be created
  + resource "google_compute_firewall" "private_allow_restricted_network_inbound" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + id                 = (known after apply)
      + name               = (known after apply)
      + network            = (known after apply)
      + priority           = 1000
      + project            = "fast-planet-243821"
      + self_link          = (known after apply)
      + source_ranges      = (known after apply)
      + source_tags        = [
          + "private",
          + "private-persistence",
        ]
      + target_tags        = [
          + "private-persistence",
        ]

      + allow {
          + ports    = []
          + protocol = "all"
        }
    }

  # module.vpc_network.module.network_firewall.google_compute_firewall.public_allow_all_inbound will be created
  + resource "google_compute_firewall" "public_allow_all_inbound" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + id                 = (known after apply)
      + name               = (known after apply)
      + network            = (known after apply)
      + priority           = 1000
      + project            = "fast-planet-243821"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + target_tags        = [
          + "public",
        ]

      + allow {
          + ports    = []
          + protocol = "all"
        }
    }

Plan: 17 to add, 0 to change, 0 to destroy.

Warning: Quoted references are deprecated

  on main.tf line 67, in resource "google_container_node_pool" "node_pool":
  67:   provider = "google-beta"

In this context, references are expected literally rather than in quotes.
Terraform 0.11 and earlier required quotes, but quoted references are now
deprecated and will be removed in a future version of Terraform. Remove the
quotes surrounding this reference to silence this warning.

(and 2 more similar warnings elsewhere)


------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

